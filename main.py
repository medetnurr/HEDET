import telebot
from telebot import types

TOKEN = '5744319727:AAE6XN6P_s7ItvS4WOmWxUYa8uMmpy9UpEw'
bot = telebot.TeleBot(TOKEN)

age_flag = False
sex_flag = False
cp_flag = False
trestbps_flag = False
chol_flag = False
fbs_flag = False
restecg_flag = False
thalach_flag = False
exang_flag = False
oldpeak_flag = False
slope_flag = False

age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak = -1, -1, -1, -1, -1, -1, -1, -1, -1, -1.0
slope = -1

msg_id1, msg_id2 = -1, -1

msg1 = [
    "–ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Ç–µ—Å—Ç—É!\n\n–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –∑–∞–ø–æ–Ω–∏—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ:",
    "\n\nüî¥ 1) Age:    –í–æ–∑—Ä–∞—Å—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ (–ª–µ—Ç)",
    "\nüî¥ 2) Sex:    –ü–æ–ª –ø–∞—Ü–∏–µ–Ω—Ç–∞",
    "\nüî¥ 3) ChestPainType:  –¢–∏–ø –±–æ–ª–∏ –≤ –≥—Ä—É–¥–∏",
    "\nüî¥ 4) RestingBP:  –ê—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–æ–∫–æ–µ (–º–º —Ä—Ç.—Å—Ç.)",
    "\nüî¥ 5) Cholesterol:    –•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω —Å—ã–≤–æ—Ä–æ—Ç–∫–∏ (–º–º/–¥–ª)",
    "\nüî¥ 6) FastingBS:  –£—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏ –Ω–∞—Ç–æ—â–∞–∫ (–º–≥/–¥–ª)",
    "\nüî¥ 7) RestingECG: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–ª–µ–∫—Ç—Ä–æ–∫–∞—Ä–¥–∏–æ–≥—Ä–∞–º–º—ã –≤ –ø–æ–∫–æ–µ",
    "\nüî¥ 8) MaxHR:  –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Å–µ—Ä–¥–µ—á–Ω—ã—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π",
    "\nüî¥ 9) ExerciseAngina: –°—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è, –≤—ã–∑–≤–∞–Ω–Ω–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π",
    "\nüî¥ 10) Oldpeak:   –ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∏–∑–º–µ—Ä–µ–Ω–Ω–æ–µ –ø—Ä–∏ –¥–µ–ø—Ä–µ—Å—Å–∏–∏",
    "\nüî¥ 11) ST_Slope:  –ù–∞–∫–ª–æ–Ω –ø–∏–∫–æ–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ ST –ø—Ä–∏ –Ω–∞–≥—Ä—É–∑–∫–µ",
]

not_del = -1


def df():
    global age_flag
    global sex_flag
    global cp_flag
    global trestbps_flag
    global chol_flag
    global fbs_flag
    global restecg_flag
    global thalach_flag
    global exang_flag
    global oldpeak_flag
    global slope_flag
    global msg1
    age_flag = False
    sex_flag = False
    cp_flag = False
    trestbps_flag = False
    chol_flag = False
    fbs_flag = False
    restecg_flag = False
    thalach_flag = False
    exang_flag = False
    oldpeak_flag = False
    slope_flag = False

    msg1 = [
        "–ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Ç–µ—Å—Ç—É!\n\n–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –∑–∞–ø–æ–Ω–∏—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ:",
        "\n\nüî¥ 1) Age:    –í–æ–∑—Ä–∞—Å—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ (–ª–µ—Ç)",
        "\nüî¥ 2) Sex:    –ü–æ–ª –ø–∞—Ü–∏–µ–Ω—Ç–∞",
        "\nüî¥ 3) ChestPainType:  –¢–∏–ø –±–æ–ª–∏ –≤ –≥—Ä—É–¥–∏",
        "\nüî¥ 4) RestingBP:  –ê—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–æ–∫–æ–µ (–º–º —Ä—Ç.—Å—Ç.)",
        "\nüî¥ 5) Cholesterol:    –•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω —Å—ã–≤–æ—Ä–æ—Ç–∫–∏ (–º–º/–¥–ª)",
        "\nüî¥ 6) FastingBS:  –£—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏ –Ω–∞—Ç–æ—â–∞–∫ (–º–≥/–¥–ª)",
        "\nüî¥ 7) RestingECG: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–ª–µ–∫—Ç—Ä–æ–∫–∞—Ä–¥–∏–æ–≥—Ä–∞–º–º—ã –≤ –ø–æ–∫–æ–µ",
        "\nüî¥ 8) MaxHR:  –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Å–µ—Ä–¥–µ—á–Ω—ã—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π",
        "\nüî¥ 9) ExerciseAngina: –°—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è, –≤—ã–∑–≤–∞–Ω–Ω–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π",
        "\nüî¥ 10) Oldpeak:   –ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∏–∑–º–µ—Ä–µ–Ω–Ω–æ–µ –ø—Ä–∏ –¥–µ–ø—Ä–µ—Å—Å–∏–∏",
        "\nüî¥ 11) ST_Slope:  –ù–∞–∫–ª–æ–Ω –ø–∏–∫–æ–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ ST –ø—Ä–∏ –Ω–∞–≥—Ä—É–∑–∫–µ",
    ]


def isfloat(num):
    try:
        float(num)
        return True
    except ValueError:
        return False


def msg(lst):
    s = ''
    for i in lst:
        s += i
    return s


def output(message):
    s = '–û–∂–∏–¥–∞–π—Ç–µ! –ò–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...üîç'
    bot.edit_message_text(chat_id=message.chat.id, message_id=msg_id2, text=s)
    print(age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope)
    a = getPredictions_random(age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope)
    s = ''
    if str(a) == '[2]':
        s = '–ö —Å—á–∞—Å—Ç—å—é, —É –≤–∞—Å –Ω–µ—Ç –±–æ–ª–µ–∑–Ω–µ–π —Å–µ—Ä–¥—Ü–∞!‚ù§ –ú–æ–∂–µ—Ç–µ –±—ã—Ç—å —Å–ø–æ–∫–æ–π–Ω—ã–º!'
    elif str(a) == '1':
        s = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –±–æ–ª—å–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ.‚Äç‚ù§Ô∏è‚Äçü©π –ú—ã –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ—Å–µ—Ç–∏—Ç—å –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞!'
    bot.edit_message_text(chat_id=message.chat.id, message_id=msg_id2, text=s)


def getPredictions_random(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11):
    import joblib
    import numpy as np
    model = joblib.load('db/randomforest.pkl')
    arr = np.array([[p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11]])
    prediction = model.predict(arr)
    if prediction == 0:
        return "0"
    elif prediction == 1:
        return "1"
    else:
        return prediction


def del_mes(message):
    global not_del
    for i in range(message.message_id - not_del):
        try:
            bot.delete_message(message.chat.id, not_del + i + 1)
        except Exception as e:
            print(repr(e))
    not_del = message.message_id


@bot.message_handler(commands=['start'])
def start_command(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    a = types.KeyboardButton('/test')
    markup.add(a)
    sti1 = open('media/heart.tgs', 'rb')
    bot.send_sticker(message.chat.id, sti1)
    bot.send_message(message.chat.id,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, " + message.from_user.first_name + "!"
                                                                           "\n–Ø ‚Äî –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º "
                                                                           "–≤—ã—è–≤–∏—Ç—å –°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è —Å "
                                                                           "–ø–æ–º–æ—â—å—é –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞."
                                                                           "\n\n–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–æ–π, –æ—Ç–ø—Ä–∞–≤–∏–≤ "
                                                                           "—Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã: "
                                                                           "\n\n/test - –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç üî¨."
                     .format(
                         message.from_user, bot.get_me()),
                     parse_mode='html', reply_markup=markup)


@bot.message_handler(commands=['test'])
def test_command(message):
    global msg_id1
    global msg_id2
    global not_del
    df()
    snt_msg = bot.send_message(message.chat.id, msg(msg1))
    msg_id1 = snt_msg.message_id
    snt_msg2 = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: ")
    bot.register_next_step_handler(snt_msg2, age_handler)
    msg_id2 = snt_msg2.message_id
    not_del = msg_id2
    global age_flag
    age_flag = True


@bot.message_handler(content_types=['text'])
def age_handler(message):
    global age_flag
    global sex_flag
    if age_flag:
        if isinstance(message.text, str) and message.text.isdigit():
            global age
            age = int(message.text)
            age_flag = False

            msg1[1] = "\n\nüü¢ 1) Age:    " + message.text
            bot.edit_message_text(chat_id=message.chat.id, message_id=msg_id1, text=msg(msg1))

            del_mes(message)

            markup = types.InlineKeyboardMarkup()
            bM = types.InlineKeyboardButton('–ú—É–∂—Å–∫–æ–π', callback_data='1')
            bF = types.InlineKeyboardButton('–ñ–µ–Ω—Å–∫–∏–π', callback_data='2')
            markup.row(bM, bF)

            bot.edit_message_text(chat_id=message.chat.id, message_id=msg_id2, text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª:",
                                  reply_markup=markup)

            sex_flag = True
        else:

            b = bot.send_message(message.chat.id, "–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –≤–≤–æ–¥–∞. –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: ")
            bot.register_next_step_handler(b, age_handler)
            age_flag = True


def trestbps_handler(message):
    global trestbps_flag
    global chol_flag
    if trestbps_flag:
        if isinstance(message.text, str) and message.text.isdigit():
            global trestbps
            trestbps = int(message.text)
            trestbps_flag = False

            msg1[4] = "\nüü¢ 4) RestingBP:  " + message.text
            bot.edit_message_text(chat_id=message.chat.id, message_id=msg_id1, text=msg(msg1))
            del_mes(message)

            chol_flag = True
            b = bot.edit_message_text(chat_id=message.chat.id, message_id=msg_id2,
                                      text="–ù–∞–ø–∏—à–∏—Ç–µ —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω —Å—ã–≤–æ—Ä–æ—Ç–∫–∏ (–º–º/–¥–ª)")
            bot.register_next_step_handler(b, chol_handler)
        else:
            b = bot.send_message(message.chat.id,
                                 "–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –≤–≤–æ–¥–∞. –ù–∞–ø–∏—à–∏—Ç–µ –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–æ–∫–æ–µ (–º–º —Ä—Ç.—Å—Ç.)")
            bot.register_next_step_handler(b, trestbps_handler)
            trestbps_flag = True


def chol_handler(message):
    global chol_flag
    if chol_flag:
        if isinstance(message.text, str) and message.text.isdigit():
            global chol
            chol = int(message.text)
            chol_flag = False

            msg1[5] = "\nüü¢ 5) Cholesterol:    " + str(chol)
            bot.edit_message_text(chat_id=message.chat.id, message_id=msg_id1, text=msg(msg1))
            del_mes(message)

            global fbs_flag
            fbs_flag = True
            b = bot.edit_message_text(chat_id=message.chat.id, message_id=msg_id2,
                                      text="–ù–∞–ø–∏—à–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏ –Ω–∞—Ç–æ—â–∞–∫ (–º–≥/–¥–ª):")
            bot.register_next_step_handler(b, fbs_handler)
        else:
            b = bot.send_message(message.chat.id, "–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –≤–≤–æ–¥–∞. –ù–∞–ø–∏—à–∏—Ç–µ —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω —Å—ã–≤–æ—Ä–æ—Ç–∫–∏ (–º–º/–¥–ª)")
            bot.register_next_step_handler(b, chol_handler)
            chol_flag = True


def fbs_handler(message):
    global fbs_flag
    if fbs_flag:
        if isinstance(message.text, str) and message.text.isdigit():
            global fbs

            fbs = int(message.text)
            fbs = max(min(fbs - 120, 1), 0) + 1
            fbs_flag = False

            msg1[6] = "\nüü¢ 6) FastingBS:  " + message.text
            bot.edit_message_text(chat_id=message.chat.id, message_id=msg_id1, text=msg(msg1))
            del_mes(message)

            markup = types.InlineKeyboardMarkup()
            b0 = types.InlineKeyboardButton('–û–±—ã—á–Ω—ã–π', callback_data='1')
            b1 = types.InlineKeyboardButton('–ù–∞–ª–∏—á–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ ST-T', callback_data='2')
            b2 = types.InlineKeyboardButton("–ì–∏–ø–µ—Ä—Ç—Ä–æ—Ñ–∏—è –ª–µ–≤–æ–≥–æ –∂–µ–ª—É–¥–æ—á–∫–∞", callback_data='3')
            markup.row(b0, b1)
            markup.row(b2)
            bot.edit_message_text(chat_id=message.chat.id, message_id=msg_id2,
                                  text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–ª–µ–∫—Ç—Ä–æ–∫–∞—Ä–¥–∏–æ–≥—Ä–∞–º–º—ã –≤ –ø–æ–∫–æ–µ:", reply_markup=markup)
            global restecg_flag
            restecg_flag = True
        else:
            b = bot.send_message(message.chat.id,
                                 "–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –≤–≤–æ–¥–∞. –ù–∞–ø–∏—à–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏ –Ω–∞—Ç–æ—â–∞–∫ (–º–≥/–¥–ª):")
            bot.register_next_step_handler(b, fbs_handler)
            fbs_flag = True


def thalach_handler(message):
    global thalach_flag
    if thalach_flag:
        if isinstance(message.text, str) and message.text.isdigit():
            global thalach
            thalach = int(message.text)
            thalach_flag = False

            msg1[8] = "\nüü¢ 8) MaxHR:  " + str(thalach)
            bot.edit_message_text(chat_id=message.chat.id, message_id=msg_id1, text=msg(msg1))
            del_mes(message)

            markup = types.InlineKeyboardMarkup()
            bM = types.InlineKeyboardButton('–îa', callback_data='2')
            bF = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='1')
            markup.row(bM, bF)
            bot.edit_message_text(chat_id=message.chat.id, message_id=msg_id2,
                                  text="–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è, –≤—ã–∑–≤–∞–Ω–Ω–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π?",
                                  reply_markup=markup)
            global exang_flag
            exang_flag = True
        else:
            b = bot.send_message(message.chat.id,
                                 "–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –≤–≤–æ–¥–∞. –ù–∞–ø–∏—à–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—É—é —á–∞—Å—Ç–æ—Ç—É "
                                 "—Å–µ—Ä–¥–µ—á–Ω—ã—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π:")
            bot.register_next_step_handler(b, thalach_handler)
            thalach = True


def oldpeak_handler(message):
    global oldpeak_flag
    if oldpeak_flag:
        if isinstance(message.text, str) and isfloat(message.text):
            global oldpeak
            oldpeak = float(message.text)
            oldpeak_flag = False

            msg1[10] = "\nüü¢ 10) Oldpeak:   " + message.text
            bot.edit_message_text(chat_id=message.chat.id, message_id=msg_id1, text=msg(msg1))
            del_mes(message)

            markup = types.InlineKeyboardMarkup()
            b1 = types.InlineKeyboardButton('–í–æ—Å—Ö–æ–¥—è—â–∏–π', callback_data='1')
            b2 = types.InlineKeyboardButton('–ü–ª–æ—Å–∫–∏–π', callback_data='2')
            b3 = types.InlineKeyboardButton('–°–ø—É—Å–∫', callback_data='3')
            markup.row(b1, b2, b3)
            bot.edit_message_text(chat_id=message.chat.id, message_id=msg_id2,
                                  text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∫–ª–æ–Ω –ø–∏–∫–æ–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ ST –≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–∏ :",
                                  reply_markup=markup)
            global slope_flag
            slope_flag = True
        else:
            bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é –¥–µ–ø—Ä–µ—Å—Å–∏—é ST, –≤—ã–∑–≤–∞–Ω–Ω—É—é —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏")
            oldpeak_flag = True


@bot.callback_query_handler(func=lambda call: True)
def handle(call):
    try:
        global sex_flag
        global cp_flag
        global restecg_flag
        global exang_flag
        global slope_flag
        if sex_flag:
            global sex
            sex = int(call.data)
            sex_flag = False

            gender = '–ú—É–∂—Å–∫–æ–π' if sex == 1 else '–ñ–µ–Ω—Å–∫–∏–π'
            msg1[2] = "\nüü¢ 2) Sex:    " + gender
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=msg_id1, text=msg(msg1))

            markup = types.InlineKeyboardMarkup()
            b1 = types.InlineKeyboardButton('–¢–∏–ø–∏—á–Ω–∞—è —Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è', callback_data='4')
            b2 = types.InlineKeyboardButton('–ê—Ç–∏–ø–∏—á–Ω–∞—è —Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è', callback_data='1')
            b3 = types.InlineKeyboardButton('–ù–µ–∞–Ω–≥–∏–Ω–æ–∑–Ω–∞—è –±–æ–ª—å', callback_data='2')
            b4 = types.InlineKeyboardButton('–ë–µ—Å—Å–∏–º–ø—Ç–æ–º–Ω—ã–π', callback_data='3')
            markup.row(b1, b2)
            markup.row(b3, b4)

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=msg_id2, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ–ª–∏ –≤ –≥—Ä—É–¥–∏:",
                                  reply_markup=markup)

            cp_flag = True
        elif cp_flag:
            global cp
            cp = int(call.data)
            cp_flag = False

            cp_msg = '–ê—Ç–∏–ø–∏—á–Ω–∞—è —Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è'
            if cp == 4:
                cp_msg = '–¢–∏–ø–∏—á–Ω–∞—è —Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è'
            elif cp == 2:
                cp_msg = '–ù–µ–∞–Ω–≥–∏–Ω–æ–∑–Ω–∞—è –±–æ–ª—å'
            elif cp == 3:
                cp_msg = '–ë–µ—Å—Å–∏–º–ø—Ç–æ–º–Ω—ã–π'

            msg1[3] = "\nüü¢ 3) ChestPainType:  " + cp_msg
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=msg_id1, text=msg(msg1))

            global trestbps_flag
            trestbps_flag = True

            _ms = bot.edit_message_text(chat_id=call.message.chat.id, message_id=msg_id2,
                                        text="–ù–∞–ø–∏—à–∏ –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–æ–∫–æ–µ (–º–º —Ä—Ç.—Å—Ç.)")
            bot.register_next_step_handler(_ms, trestbps_handler)

        elif restecg_flag:
            global restecg
            restecg = int(call.data)
            restecg_flag = False

            restecg_msg = '–û–±—ã—á–Ω—ã–π'
            if restecg == 2:
                restecg_msg = '–ù–∞–ª–∏—á–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ ST-T'
            elif restecg == 3:
                restecg_msg = '–ì–∏–ø–µ—Ä—Ç—Ä–æ—Ñ–∏—è –ª–µ–≤–æ–≥–æ –∂–µ–ª—É–¥–æ—á–∫–∞'

            msg1[7] = "\nüü¢ 7) RestingECG: " + restecg_msg
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=msg_id1, text=msg(msg1))

            global thalach_flag
            thalach_flag = True
            _ms = bot.edit_message_text(chat_id=call.message.chat.id, message_id=msg_id2,
                                        text="–ù–∞–ø–∏—à–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—É—é —á–∞—Å—Ç–æ—Ç—É —Å–µ—Ä–¥–µ—á–Ω—ã—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π:")
            bot.register_next_step_handler(_ms, thalach_handler)
        elif exang_flag:
            global exang
            exang = int(call.data)
            exang_flag = False

            exang_msg = '–ù–µ—Ç'
            if call.data == '2':
                exang_msg = '–î–∞'

            msg1[9] = "\nüü¢ 9) ExerciseAngina: " + exang_msg
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=msg_id1, text=msg(msg1))

            global oldpeak_flag
            oldpeak_flag = True
            _ms = bot.edit_message_text(chat_id=call.message.chat.id, message_id=msg_id2,
                                        text="–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é –¥–µ–ø—Ä–µ—Å—Å–∏—é ST, –≤—ã–∑–≤–∞–Ω–Ω—É—é —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏")
            bot.register_next_step_handler(_ms, oldpeak_handler)
        elif slope_flag:
            global slope
            slope = int(call.data)
            slope_flag = False
            slope_msg = '–í–æ—Å—Ö–æ–¥—è—â–∏–π'
            if slope == 2:
                slope_msg = '–ü–ª–æ—Å–∫–∏–π'
            elif slope == 3:
                slope_msg = '–°–ø—É—Å–∫'

            msg1[11] = "\nüü¢ 11) ST_Slope:  " + slope_msg
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=msg_id1, text=msg(msg1))

            print('final', output(call.message))

    except Exception as e:
        print(repr(e))


bot.polling()
